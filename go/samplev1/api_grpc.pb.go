// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package samplev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SampleAPIClient is the client API for SampleAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SampleAPIClient interface {
	// GetFoo ...
	GetFoo(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error)
}

type sampleAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleAPIClient(cc grpc.ClientConnInterface) SampleAPIClient {
	return &sampleAPIClient{cc}
}

func (c *sampleAPIClient) GetFoo(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error) {
	out := new(Foo)
	err := c.cc.Invoke(ctx, "/sample.v1.SampleAPI/GetFoo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleAPIServer is the server API for SampleAPI service.
// All implementations must embed UnimplementedSampleAPIServer
// for forward compatibility
type SampleAPIServer interface {
	// GetFoo ...
	GetFoo(context.Context, *Foo) (*Foo, error)
	mustEmbedUnimplementedSampleAPIServer()
}

// UnimplementedSampleAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSampleAPIServer struct {
}

func (UnimplementedSampleAPIServer) GetFoo(context.Context, *Foo) (*Foo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFoo not implemented")
}
func (UnimplementedSampleAPIServer) mustEmbedUnimplementedSampleAPIServer() {}

// UnsafeSampleAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SampleAPIServer will
// result in compilation errors.
type UnsafeSampleAPIServer interface {
	mustEmbedUnimplementedSampleAPIServer()
}

func RegisterSampleAPIServer(s grpc.ServiceRegistrar, srv SampleAPIServer) {
	s.RegisterService(&SampleAPI_ServiceDesc, srv)
}

func _SampleAPI_GetFoo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleAPIServer).GetFoo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.v1.SampleAPI/GetFoo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleAPIServer).GetFoo(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

// SampleAPI_ServiceDesc is the grpc.ServiceDesc for SampleAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SampleAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sample.v1.SampleAPI",
	HandlerType: (*SampleAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFoo",
			Handler:    _SampleAPI_GetFoo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
